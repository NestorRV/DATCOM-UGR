plot.ts(serieTr.SinTend.H1, xlim = c(1, tiempoTs[length(tiempoTs)]))
lines(tiempoTs, serieTs.SinTend.H1, col = "red")
serieTr.SinTend.H1 <- serieTr - TendEstimadaTr.H1
serieTs.SinTend.H1 <- serieTs - TendEstimadaTs.H1
plot.ts(serieTr.SinTend.H1, xlim = c(1, tiempoTs[length(tiempoTs)]))
lines(tiempoTs, serieTs.SinTend.H1, col = "red")
#Comprobamos el test de Dickye-Fuller aumentado para la estacionaridad
adftest.H1 <- adf.test(serieTr.SinTendEst.H1)
#Calculamos y elimnamos la estacionalidad
k <- 12 #Asumimos periodo de estacionalidad k = 12
estaiconalidad.H1 <- decompose(serie.ts)$seasonal[1:k]
#Calculamos y elimnamos la estacionalidad
k <- 12 #Asumimos periodo de estacionalidad k = 12
estacionalidad.H1 <- decompose(serie.ts)$seasonal[1:k]
#Calculamos y elimnamos la estacionalidad
k <- 12 #Asumimos periodo de estacionalidad k = 12
estacionalidad.H1 <- decompose(serie.ts)$seasonal[1:k]
#Eliminamos estacionalidad para el modelo
aux <- rep(estacionalidad.H1, length(serieTr)/length(estacionalidad.H1))
serieTr.SinTendEst.H1 <- serieTr.SinTend.H1 - aux
serieTs.SinTendEst.H1 <- serieTs.SinTend.H1 - aux
plot.ts(serieTr.SinTendEst.H1, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempoTs, serieTs.SinTend.H1, col = "red")
#Calculamos y elimnamos la estacionalidad
k <- 12 #Asumimos periodo de estacionalidad k = 12
estacionalidad.H1 <- decompose(serie.ts)$seasonal[1:k]
#Eliminamos estacionalidad para el modelo
aux <- rep(estacionalidad.H1, length(serieTr)/length(estacionalidad.H1))
serieTr.SinTendEst.H1 <- serieTr.SinTend.H1 - aux
serieTs.SinTendEst.H1 <- serieTs.SinTend.H1 - estacionalidad.H1
plot.ts(serieTr.SinTendEst.H1, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempoTs, serieTs.SinTend.H1, col = "red")
#Calculamos y elimnamos la estacionalidad
k <- 12 #Asumimos periodo de estacionalidad k = 12
estacionalidad.H1 <- decompose(serie.ts)$seasonal[1:k]
#Eliminamos estacionalidad para el modelo
aux <- rep(estacionalidad.H1, length(serieTr)/length(estacionalidad.H1))
serieTr.SinTendEst.H1 <- serieTr.SinTend.H1 - aux
serieTs.SinTendEst.H1 <- serieTs.SinTend.H1 - estacionalidad.H1
plot.ts(serieTr.SinTendEst.H1, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempoTs, serieTs.SinTend.H1, col = "red")
#Calculamos y elimnamos la estacionalidad
k <- 12 #Asumimos periodo de estacionalidad k = 12
estacionalidad.H1 <- decompose(serie.ts)$seasonal[1:k]
#Eliminamos estacionalidad para el modelo
aux <- rep(estacionalidad.H1, length(serieTr)/length(estacionalidad.H1))
serieTr.SinTendEst.H1 <- serieTr.SinTend.H1 - aux
serieTs.SinTendEst.H1 <- serieTs.SinTend.H1 - estacionalidad.H1
plot.ts(serieTr.SinTendEst.H1, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempoTs, serieTs.SinTendEst.H1, col = "red")
#Comprobamos el test de Dickye-Fuller aumentado para la estacionaridad
adftest.H1 <- adf.test(serieTr.SinTendEst.H1)
#Como no se supera (valor>0.05), diferenciamos la serie
serieTr.SinTendEstDiff.H1 <- diff(serieTr.SinTendEst.H1)
serieTs.SinTendEstDiff.H1 <- diff(serieTs.SinTendEst.H1)
#Volvemos a aplicar el test
adftest.H1 <- adf.test(serieTr.SinTendEstDiff.H1)
#Comprobamos el test de Dickye-Fuller aumentado para la estacionaridad
adf.test(serieTr.SinTendEst.H1)
#Como no se supera (valor>0.05), diferenciamos la serie
serieTr.SinTendEstDiff.H1 <- diff(serieTr.SinTendEst.H1)
serieTs.SinTendEstDiff.H1 <- diff(serieTs.SinTendEst.H1)
#Volvemos a aplicar el test
adf.test(serieTr.SinTendEstDiff.H1)
acf(serieTr.SinTendEstDiff.H1)
pacf(serieTr.SinTendEstDiff.H1)
# Ajustamos el modelo
modelo.H1 <- arima(serieTr.SinTendEst.H1, order = c(4, 1, 0))
valoresAjustados.H1 <- serieTr.SinTendEst.H1 + modelo.H1$residuals
#Calculamos las predicciones
# Ajustamos el modelo
modelo.H1 <- arima(serieTr.SinTendEst.H1, order = c(4, 1, 0))
valoresAjustados.H1 <- serieTr.SinTendEst.H1 + modelo.H1$residuals
#Calculamos las predicciones
Predicciones.H1 <- predict(modelo.H1, n.ahead = NPred)
valoresPredichos.H1 <- Predicciones.H1$pred
# Ajustamos el modelo
modelo.H1 <- arima(serieTr.SinTendEst.H1, order = c(4, 1, 0))
valoresAjustados.H1 <- serieTr.SinTendEst.H1 + modelo.H1$residuals
#Calculamos las predicciones
Predicciones.H1 <- predict(modelo.H1, n.ahead = NPred)
valoresPredichos.H1 <- Predicciones.H1$pred
#Calculamos el error cuadr치tico acumulado del ajuste, en ajuste y en test
errorTr.H1 <- sum((modelo.H1$residuals)^2)
errorTr.H1
errorTs.H1 <- sum((valoresPredichos.H1-serieTs.SinTendEst.H1)^2)
errorTs.H1
# Mostramos las gr치ficas del ajuste y predicci칩n en test
plot.ts(serieTr.SinTendEst.H1, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(valoresAjustados.H1, col = "blue")
lines(tiempoTs, serieTs.SinTendEst.H1, col = "red")
lines(tiempoTs, valoresPredichos.H1, col = "blue")
#Tests para la seccion del modelo y su validacion
Box.test(modelo.H1$residuals)
#Test de normalidad de Jarque Bera
jarque.bera.test(modelo.H1$residuals)
#Test de normalidad de Shaphiro-Wilk
shapiro.test(modelo.H1$residuals)
hist(modelo.H1$residuals, col = "blue", prob = T, ylim=c(0, 20), xlim=c(-0.2, 0.2))
lines(density(modelo.H1$residuals))
serieEntera <- serie.log #Cogemos toda la serie
tiempo <- 1:length(serieEntera)
parametros <- lm(serieEntera ~ tiempo) #Ajustamos modelo de tendencia
serieEntera <- serie.log #Cogemos toda la serie
tiempo <- 1:length(serieEntera)
parametros <- lm(serieEntera ~ tiempo) #Ajustamos modelo de tendencia
TendEstiamada <- parametros$coefficients[1] + tiempo * parametros$coefficients[2]
serieSinTend <- serieEntera - TendEstiamada+
aux <- ts(serieEntera, frequency = 12)
serieEntera <- serie.log #Cogemos toda la serie
tiempo <- 1:length(serieEntera)
parametros <- lm(serieEntera ~ tiempo) #Ajustamos modelo de tendencia
TendEstiamada <- parametros$coefficients[1] + tiempo * parametros$coefficients[2]
serieSinTend <- serieEntera - TendEstiamada
aux <- ts(serieEntera, frequency = 12)
serieEntera <- serie.log #Cogemos toda la serie
tiempo <- 1:length(serieEntera)
parametros <- lm(serieEntera ~ tiempo) #Ajustamos modelo de tendencia
TendEstiamada <- parametros$coefficients[1] + tiempo * parametros$coefficients[2]
serieSinTend <- serieEntera - TendEstiamada
aux <- ts(serieEntera, frequency = 12)
aux <- decompose(aux)$seasonal
estacionalidad <- as.numeric(aux[1:12])
aux <- rep(estacionalidad, length(serieSinTend) / length(estacionalidad))
seriesSinTendEst <- seriesSinTend - aux
serieEntera <- serie.log #Cogemos toda la serie
tiempo <- 1:length(serieEntera)
parametros <- lm(serieEntera ~ tiempo) #Ajustamos modelo de tendencia
TendEstiamada <- parametros$coefficients[1] + tiempo * parametros$coefficients[2]
serieSinTend <- serieEntera - TendEstiamada
aux <- ts(serieEntera, frequency = 12)
aux <- decompose(aux)$seasonal
estacionalidad <- as.numeric(aux[1:12])
aux <- rep(estacionalidad, length(serieSinTend) / length(estacionalidad))
serieSinTendEst <- serieSinTend - aux
serieEntera <- serie.log #Cogemos toda la serie
tiempo <- 1:length(serieEntera)
parametros <- lm(serieEntera ~ tiempo) #Ajustamos modelo de tendencia
TendEstiamada <- parametros$coefficients[1] + tiempo * parametros$coefficients[2]
serieSinTend <- serieEntera - TendEstiamada
aux <- ts(serieEntera, frequency = 12)
aux <- decompose(aux)$seasonal
estacionalidad <- as.numeric(aux[1:12])
aux <- rep(estacionalidad, length(serieSinTend) / length(estacionalidad))
serieSinTendEst <- serieSinTend - aux
modelo <- arima(serieSinTendEst, order = c(4, 1, 0))
valoresAjustados <- serieSinTendEst + modelo$residuals
Predicciones <- predict(modelo, n.ahead = NPred)
serieEntera <- serie.log #Cogemos toda la serie
tiempo <- 1:length(serieEntera)
parametros <- lm(serieEntera ~ tiempo) #Ajustamos modelo de tendencia
TendEstiamada <- parametros$coefficients[1] + tiempo * parametros$coefficients[2]
serieSinTend <- serieEntera - TendEstiamada
aux <- ts(serieEntera, frequency = 12)
aux <- decompose(aux)$seasonal
estacionalidad <- as.numeric(aux[1:12])
aux <- rep(estacionalidad, length(serieSinTend) / length(estacionalidad))
serieSinTendEst <- serieSinTend - aux
modelo <- arima(serieSinTendEst, order = c(4, 1, 0))
valoresAjustados <- serieSinTendEst + modelo$residuals
Predicciones <- predict(modelo, n.ahead = NPred)
valoresPredichos <- Predicciones$pred #Cogemos las predicciones
#Por ultimo, deshacemos cambios
valoresAjustados <- valoresAjustados + aux #Estacionalidad
valoresPredichos <- valoresPredichos + estacionalidad
valoresAjustados <- valoresAjustados + TendEstiamada
tiempoPred <- (tiempo[length(tiempo)]+(1:NPred))
#Por ultimo, deshacemos cambios
valoresAjustados <- valoresAjustados + aux #Estacionalidad
valoresPredichos <- valoresPredichos + estacionalidad
valoresAjustados <- valoresAjustados + TendEstiamada
tiempoPred <- (tiempo[length(tiempo)]+(1:NPred))
TendEstimadaPred <- parametros$coefficients[1] + tiempoPred*parametros$coefficients[2]
valoresPredichos <- valoresPredichos + TendEstiamadaPred
#Por ultimo, deshacemos cambios
valoresAjustados <- valoresAjustados + aux #Estacionalidad
valoresPredichos <- valoresPredichos + estacionalidad
valoresAjustados <- valoresAjustados + TendEstiamada
tiempoPred <- (tiempo[length(tiempo)]+(1:NPred))
TendEstimadaPred <- parametros$coefficients[1] + tiempoPred*parametros$coefficients[2]
valoresPredichos <- valoresPredichos + TendEstimadaPred
#Por ultimo, deshacemos cambios
valoresAjustados <- valoresAjustados + aux #Estacionalidad
valoresPredichos <- valoresPredichos + estacionalidad
valoresAjustados <- valoresAjustados + TendEstiamada
tiempoPred <- (tiempo[length(tiempo)]+(1:NPred))
TendEstimadaPred <- parametros$coefficients[1] + tiempoPred*parametros$coefficients[2]
valoresPredichos <- valoresPredichos + TendEstimadaPred
valoresAjustados <- exp(valoresAjustados) #Transformaci칩n log de los datos
valoresPredichos <- exp(valoresPredichos)
plot.ts(seris, xlim=c(1, max(tiempoPred)), ylim=c(100, 650))
#Por ultimo, deshacemos cambios
valoresAjustados <- valoresAjustados + aux #Estacionalidad
valoresPredichos <- valoresPredichos + estacionalidad
valoresAjustados <- valoresAjustados + TendEstiamada
tiempoPred <- (tiempo[length(tiempo)]+(1:NPred))
TendEstimadaPred <- parametros$coefficients[1] + tiempoPred*parametros$coefficients[2]
valoresPredichos <- valoresPredichos + TendEstimadaPred
valoresAjustados <- exp(valoresAjustados) #Transformaci칩n log de los datos
valoresPredichos <- exp(valoresPredichos)
plot.ts(serie, xlim=c(1, max(tiempoPred)), ylim=c(100, 650))
lines(valoresAjustados, col = "blue")
lines(valoresPredichos, col = "red")
serieEntera <- serie.log #Cogemos toda la serie
tiempo <- 1:length(serieEntera)
parametros <- lm(serieEntera ~ tiempo) #Ajustamos modelo de tendencia
TendEstiamada <- parametros$coefficients[1] + tiempo * parametros$coefficients[2]
serieSinTend <- serieEntera - TendEstiamada
aux <- ts(serieEntera, frequency = 12)
aux <- decompose(aux)$seasonal
estacionalidad <- as.numeric(aux[1:12])
aux <- rep(estacionalidad, length(serieSinTend) / length(estacionalidad))
serieSinTendEst <- serieSinTend - aux
modelo <- arima(serieSinTendEst, order = c(4, 1, 0))
valoresAjustados <- serieSinTendEst + modelo$residuals
Predicciones <- predict(modelo, n.ahead = NPred)
valoresPredichos <- Predicciones$pred #Cogemos las predicciones
#Por ultimo, deshacemos cambios
valoresAjustados <- valoresAjustados + aux #Estacionalidad
valoresPredichos <- valoresPredichos + estacionalidad
valoresAjustados <- valoresAjustados + TendEstiamada
tiempoPred <- (tiempo[length(tiempo)]+(1:NPred))
TendEstimadaPred <- parametros$coefficients[1] + tiempoPred*parametros$coefficients[2]
valoresPredichos <- valoresPredichos + TendEstimadaPred
valoresAjustados <- exp(valoresAjustados) #Transformaci칩n log de los datos
valoresPredichos <- exp(valoresPredichos)
plot.ts(serie, xlim=c(1, max(tiempoPred)), ylim=c(100, 650))
lines(valoresAjustados, col = "blue")
lines(valoresPredichos, col = "red")
plot.ts(serie, xlim=c(1, max(tiempoPred)), ylim=c(100, 650))
lines(valoresAjustados, col = "blue")
lines(valoresPredichos, col = "red")
#Cargamos los valores reales de predicci칩n y los mostramos
predReales <- scan("pasajeros_1960.predict")
lines(tiempoPred, predReales, col = "green")
#Calculamos el error de predicci칩n
ErrorMedio <- sum(abs(predReales - valoresPredichos))
plot.ts(serie, xlim=c(1, max(tiempoPred)), ylim=c(100, 650))
lines(valoresAjustados, col = "blue")
lines(valoresPredichos, col = "red")
#Cargamos los valores reales de predicci칩n y los mostramos
predReales <- scan("pasajeros_1960.predict")
lines(tiempoPred, predReales, col = "green")
#Calculamos el error de predicci칩n
ErrorMedio <- sum(abs(predReales - valoresPredichos))
ErrorMedio
install.packages("session")
install.packages("fpp2")
library(tseries)
NPred = 12
NTest = 12
serie <- scan("pasajeros_1949_1959.dat")
serie.ts <- ts(serie, frequency = 12)
serie.ts
ggplot2::autoplot(serie.ts)
NPred = 12
NTest = 12
serie <- scan("pasajeros_1949_1959.dat")
serie.ts <- ts(serie, frequency = 12)
serie.ts
ggplot2::autoplot(serie.ts)
library(ggplot2)
library(tseries)
ggplot2::autoplot(serie.ts)
plot(serie.ts)
plot(decompose(serie.ts))
forecast::ggseasonplot(serie.ts, year.labels = T, year.labels.left = T)
forecast::ggsubseriesplot(serie.ts)
forecast::gglagplot(window(serie.ts))
plot(decompose(serie.ts))
serie.ts <- log(serie.ts)
serie.log <- log(serie)
plot(decompose(serie.ts))
library(tseries)
NPred = 12
NTest = 12
serie <- scan("pasajeros_1949_1959.dat")
serie.ts <- ts(serie, frequency = 12)
serie.ts
plot(serie.ts)
plot(decompose(serie.ts))
forecast::ggseasonplot(serie.ts, year.labels = T, year.labels.left = T)
forecast::ggsubseriesplot(serie.ts)
plot(decompose(serie.ts))
plot(decompose(log(serie.ts)))
serie.ts <- log(serie.ts)
serie.log <- log(serie)
plot(decompose(log(serie.ts)))
serieTr <- serie.log[1:(length(serie.log)-NTest)]
tiempoTr <- 1:length(serieTr)
serieTs <- serie.log[(length(serie.log)-NTest+1):length(serie)]
tiempoTs <- (tiempoTr[length(tiempoTr)]+1):(tiempoTr[length(tiempoTr)]+NTest)
plot.ts(serieTr, xlim = c(1, tiempoTs[length(tiempoTs)]))
lines(tiempoTs, serieTs, col = "red")
parametros.H1 <- lm(serieTr ~ tiempoTr)
#Calculamos la estimaci칩n de la tendencia.
TendEstimadaTr.H1 <- parametros.H1$coefficients[1]+tiempoTr*parametros.H1$coefficients[2]
TendEstimadaTs.H1 <- parametros.H1$coefficients[1]+tiempoTs*parametros.H1$coefficients[2]
#Mostramos en la misma figura la serie y la tendencia estimada
plot.ts(serieTr, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempoTr, TendEstimadaTr.H1, col="blue")
lines(tiempoTs, serieTs, col="red")
lines(tiempoTs, TendEstimadaTs.H1, col="green")
#Test de normalidad de Jarque Bera
jarque.bera.test(parametros.H1$residuals)
jarque.bera.test((TendEstimadaTs.H1 - serieTs))
#Test de Student
t.test(c(parametros.H1$residuals, TendEstimadaTs.H1-serieTs))
serieTr.SinTend.H1 <- serieTr - TendEstimadaTr.H1
serieTs.SinTend.H1 <- serieTs - TendEstimadaTs.H1
plot.ts(serieTr.SinTend.H1, xlim = c(1, tiempoTs[length(tiempoTs)]))
lines(tiempoTs, serieTs.SinTend.H1, col = "red")
#Calculamos y elimnamos la estacionalidad
k <- 12 #Asumimos periodo de estacionalidad k = 12
estacionalidad.H1 <- decompose(serie.ts)$seasonal[1:k]
#Eliminamos estacionalidad para el modelo
aux <- rep(estacionalidad.H1, length(serieTr)/length(estacionalidad.H1))
serieTr.SinTendEst.H1 <- serieTr.SinTend.H1 - aux
serieTs.SinTendEst.H1 <- serieTs.SinTend.H1 - estacionalidad.H1
plot.ts(serieTr.SinTendEst.H1, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempoTs, serieTs.SinTendEst.H1, col = "red")
#Comprobamos el test de Dickye-Fuller aumentado para la estacionaridad
adf.test(serieTr.SinTendEst.H1)
#Como no se supera (valor>0.05), diferenciamos la serie
serieTr.SinTendEstDiff.H1 <- diff(serieTr.SinTendEst.H1)
serieTs.SinTendEstDiff.H1 <- diff(serieTs.SinTendEst.H1)
#Volvemos a aplicar el test
adf.test(serieTr.SinTendEstDiff.H1)
acf(serieTr.SinTendEstDiff.H1)
pacf(serieTr.SinTendEstDiff.H1)
library(tseries)
NPred = 12
NTest = 12
serie <- scan("pasajeros_1949_1959.dat")
serie.ts <- ts(serie, frequency = 12)
serie.ts
plot(serie.ts)
plot(decompose(serie.ts))
forecast::ggseasonplot(serie.ts, year.labels = T, year.labels.left = T)
forecast::ggsubseriesplot(serie.ts)
plot(decompose(serie.ts))
serie.ts <- log(serie.ts)
serie.log <- log(serie)
plot(decompose(log(serie.ts)))
serieTr <- serie.log[1:(length(serie.log)-NTest)]
tiempoTr <- 1:length(serieTr)
serieTs <- serie.log[(length(serie.log)-NTest+1):length(serie)]
tiempoTs <- (tiempoTr[length(tiempoTr)]+1):(tiempoTr[length(tiempoTr)]+NTest)
plot.ts(serieTr, xlim = c(1, tiempoTs[length(tiempoTs)]))
lines(tiempoTs, serieTs, col = "red")
parametros.H1 <- lm(serieTr ~ tiempoTr)
#Calculamos la estimaci칩n de la tendencia.
TendEstimadaTr.H1 <- parametros.H1$coefficients[1]+tiempoTr*parametros.H1$coefficients[2]
TendEstimadaTs.H1 <- parametros.H1$coefficients[1]+tiempoTs*parametros.H1$coefficients[2]
#Mostramos en la misma figura la serie y la tendencia estimada
plot.ts(serieTr, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempoTr, TendEstimadaTr.H1, col="blue")
lines(tiempoTs, serieTs, col="red")
lines(tiempoTs, TendEstimadaTs.H1, col="green")
#Test de normalidad de Jarque Bera
jarque.bera.test(parametros.H1$residuals)
jarque.bera.test((TendEstimadaTs.H1 - serieTs))
#Test de Student
t.test(c(parametros.H1$residuals, TendEstimadaTs.H1-serieTs))
serieTr.SinTend.H1 <- serieTr - TendEstimadaTr.H1
serieTs.SinTend.H1 <- serieTs - TendEstimadaTs.H1
plot.ts(serieTr.SinTend.H1, xlim = c(1, tiempoTs[length(tiempoTs)]))
lines(tiempoTs, serieTs.SinTend.H1, col = "red")
#Calculamos y elimnamos la estacionalidad
k <- 12 #Asumimos periodo de estacionalidad k = 12
estacionalidad.H1 <- decompose(serie.ts)$seasonal[1:k]
#Eliminamos estacionalidad para el modelo
aux <- rep(estacionalidad.H1, length(serieTr)/length(estacionalidad.H1))
serieTr.SinTendEst.H1 <- serieTr.SinTend.H1 - aux
serieTs.SinTendEst.H1 <- serieTs.SinTend.H1 - estacionalidad.H1
plot.ts(serieTr.SinTendEst.H1, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempoTs, serieTs.SinTendEst.H1, col = "red")
#Comprobamos el test de Dickye-Fuller aumentado para la estacionaridad
adf.test(serieTr.SinTendEst.H1)
#Como no se supera (valor>0.05), diferenciamos la serie
serieTr.SinTendEstDiff.H1 <- diff(serieTr.SinTendEst.H1)
serieTs.SinTendEstDiff.H1 <- diff(serieTs.SinTendEst.H1)
#Volvemos a aplicar el test
adf.test(serieTr.SinTendEstDiff.H1)
acf(serieTr.SinTendEstDiff.H1)
pacf(serieTr.SinTendEstDiff.H1)
# Ajustamos el modelo
modelo.H1 <- arima(serieTr.SinTendEst.H1, order = c(4, 1, 0))
valoresAjustados.H1 <- serieTr.SinTendEst.H1 + modelo.H1$residuals
#Calculamos las predicciones
Predicciones.H1 <- predict(modelo.H1, n.ahead = NPred)
valoresPredichos.H1 <- Predicciones.H1$pred
#Calculamos el error cuadr치tico acumulado del ajuste, en ajuste y en test
errorTr.H1 <- sum((modelo.H1$residuals)^2)
errorTr.H1
errorTs.H1 <- sum((valoresPredichos.H1-serieTs.SinTendEst.H1)^2)
errorTs.H1
# Mostramos las gr치ficas del ajuste y predicci칩n en test
plot.ts(serieTr.SinTendEst.H1, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(valoresAjustados.H1, col = "blue")
lines(tiempoTs, serieTs.SinTendEst.H1, col = "red")
lines(tiempoTs, valoresPredichos.H1, col = "blue")
#Tests para la seccion del modelo y su validacion
Box.test(modelo.H1$residuals)
#Test de normalidad de Jarque Bera
jarque.bera.test(modelo.H1$residuals)
#Test de normalidad de Shaphiro-Wilk
shapiro.test(modelo.H1$residuals)
hist(modelo.H1$residuals, col = "blue", prob = T, ylim=c(0, 20), xlim=c(-0.2, 0.2))
lines(density(modelo.H1$residuals))
serieEntera <- serie.log #Cogemos toda la serie
tiempo <- 1:length(serieEntera)
parametros <- lm(serieEntera ~ tiempo) #Ajustamos modelo de tendencia
TendEstiamada <- parametros$coefficients[1] + tiempo * parametros$coefficients[2]
serieSinTend <- serieEntera - TendEstiamada
aux <- ts(serieEntera, frequency = 12)
aux <- decompose(aux)$seasonal
estacionalidad <- as.numeric(aux[1:12])
aux <- rep(estacionalidad, length(serieSinTend) / length(estacionalidad))
serieSinTendEst <- serieSinTend - aux
modelo <- arima(serieSinTendEst, order = c(4, 1, 0))
valoresAjustados <- serieSinTendEst + modelo$residuals
Predicciones <- predict(modelo, n.ahead = NPred)
valoresPredichos <- Predicciones$pred #Cogemos las predicciones
#Por ultimo, deshacemos cambios
#Estacionalidad
valoresAjustados <- valoresAjustados + aux
valoresPredichos <- valoresPredichos + estacionalidad
valoresAjustados <- valoresAjustados + TendEstiamada
tiempoPred <- (tiempo[length(tiempo)]+(1:NPred))
TendEstimadaPred <- parametros$coefficients[1] + tiempoPred*parametros$coefficients[2]
valoresPredichos <- valoresPredichos + TendEstimadaPred
#Transformaci칩n log de los datos
valoresAjustados <- exp(valoresAjustados)
valoresPredichos <- exp(valoresPredichos)
plot.ts(serie, xlim=c(1, max(tiempoPred)), ylim=c(100, 650))
lines(valoresAjustados, col = "blue")
lines(valoresPredichos, col = "red")
plot.ts(serie, xlim=c(1, max(tiempoPred)), ylim=c(100, 650))
lines(valoresAjustados, col = "blue")
lines(valoresPredichos, col = "red")
#Cargamos los valores reales de predicci칩n y los mostramos
predReales <- scan("pasajeros_1960.predict")
lines(tiempoPred, predReales, col = "green")
#Calculamos el error de predicci칩n
ErrorMedio <- sum(abs(predReales - valoresPredichos))
ErrorMedio
ggseasonplot(serie.ts, polar=TRUE) + ylab("n칰mero pasajeros")
forecast::ggseasonplot(serie.ts, polar=TRUE) + ylab("n칰mero pasajeros")
forecast::ggseasonplot(serie.ts, polar=TRUE) + ggplot::ylab("n칰mero pasajeros")
forecast::ggseasonplot(serie.ts, polar=TRUE) + forecast::ylab("n칰mero pasajeros")
forecast::ggseasonplot(serie.ts, polar=TRUE) + ggplot2::ylab("n칰mero pasajeros")
forecast::ggseasonplot(serie.ts, polar=TRUE)
library(tseries)
NPred = 12
NTest = 12
serie <- scan("pasajeros_1949_1959.dat")
serie.ts <- ts(serie, frequency = 12)
serie.ts
plot(serie.ts)
plot(decompose(serie.ts))
forecast::ggseasonplot(serie.ts, year.labels = T, year.labels.left = T)
forecast::ggseasonplot(serie.ts, polar=TRUE)
forecast::ggsubseriesplot(serie.ts)
plot(decompose(serie.ts))
serie.ts <- log(serie.ts)
serie.log <- log(serie)
plot(decompose(log(serie.ts)))
serieTr <- serie.log[1:(length(serie.log)-NTest)]
tiempoTr <- 1:length(serieTr)
serieTs <- serie.log[(length(serie.log)-NTest+1):length(serie)]
tiempoTs <- (tiempoTr[length(tiempoTr)]+1):(tiempoTr[length(tiempoTr)]+NTest)
plot.ts(serieTr, xlim = c(1, tiempoTs[length(tiempoTs)]))
lines(tiempoTs, serieTs, col = "red")
parametros.H1 <- lm(serieTr ~ tiempoTr)
#Calculamos la estimaci칩n de la tendencia.
TendEstimadaTr.H1 <- parametros.H1$coefficients[1]+tiempoTr*parametros.H1$coefficients[2]
TendEstimadaTs.H1 <- parametros.H1$coefficients[1]+tiempoTs*parametros.H1$coefficients[2]
#Mostramos en la misma figura la serie y la tendencia estimada
plot.ts(serieTr, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempoTr, TendEstimadaTr.H1, col="blue")
lines(tiempoTs, serieTs, col="red")
lines(tiempoTs, TendEstimadaTs.H1, col="green")
#Test de normalidad de Jarque Bera
jarque.bera.test(parametros.H1$residuals)
jarque.bera.test((TendEstimadaTs.H1 - serieTs))
#Test de Student
t.test(c(parametros.H1$residuals, TendEstimadaTs.H1-serieTs))
serieTr.SinTend.H1 <- serieTr - TendEstimadaTr.H1
serieTs.SinTend.H1 <- serieTs - TendEstimadaTs.H1
plot.ts(serieTr.SinTend.H1, xlim = c(1, tiempoTs[length(tiempoTs)]))
lines(tiempoTs, serieTs.SinTend.H1, col = "red")
#Calculamos y elimnamos la estacionalidad
k <- 12 #Asumimos periodo de estacionalidad k = 12
estacionalidad.H1 <- decompose(serie.ts)$seasonal[1:k]
#Eliminamos estacionalidad para el modelo
aux <- rep(estacionalidad.H1, length(serieTr)/length(estacionalidad.H1))
serieTr.SinTendEst.H1 <- serieTr.SinTend.H1 - aux
serieTs.SinTendEst.H1 <- serieTs.SinTend.H1 - estacionalidad.H1
plot.ts(serieTr.SinTendEst.H1, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempoTs, serieTs.SinTendEst.H1, col = "red")
#Comprobamos el test de Dickye-Fuller aumentado para la estacionaridad
adf.test(serieTr.SinTendEst.H1)
#Como no se supera (valor>0.05), diferenciamos la serie
serieTr.SinTendEstDiff.H1 <- diff(serieTr.SinTendEst.H1)
serieTs.SinTendEstDiff.H1 <- diff(serieTs.SinTendEst.H1)
#Volvemos a aplicar el test
adf.test(serieTr.SinTendEstDiff.H1)
estacionalidad.H1
serie.ts
library(tseries)
?jarque.bera.test
